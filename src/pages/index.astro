---
import Layout from "../layouts/Layout.astro"

/** Sections */
import Background from "../sections/Background.astro"
import About from "../sections/About.astro"
import Experience from "../sections/Experience.astro"
import Work from "../sections/Work.astro"
import Education from "../sections/Education.astro"

/** Components */
import Title from "../components/Title.svelte"
import MouseTrailer from "../components/MouseTrailer.svelte"
import ScrollProgress from "../components/ScrollProgress.svelte"
import Header from "../components/Header.svelte"
import "../styles/index.scss"
---

<script>
  const intersectionCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      let elem = entry.target
      if (entry.isIntersecting) {
        elem.classList.add("visible")
        elem.classList.remove("hidden")
      }
    })
  }
  const observerOptions = {
    root: null, // null means root is viewport
    rootMargin: "0px",
    threshold: .1, // trigger callback when 10% of the element is visible
  }
  const observer = new IntersectionObserver(
    intersectionCallback,
    observerOptions
  )
  const hiddenElements = document.querySelectorAll(".hidden")
  hiddenElements.forEach((el) => observer.observe(el))
</script>

<Layout title="Aleksi Koivu" />

<MouseTrailer client:only />

<div style="min-height: 125vh">
  <Background />
</div>
<main>
  <Header client:only />
  <div class="content">
    <Title />
    <About />
    <Experience />
    <Work />
    <Education />
  </div>
</main>

<style lang="scss">
  @import "../styles/index.scss";

  html {
    scroll-padding-top: 80px; /* height of sticky header */
    scroll-behavior: smooth;
    /** scale everything based on viewport width */
    font-size: clamp(0.75rem, 0.625vw + 0.5625rem, 1rem);
  }

  body,
  html {
    min-height: 100%;
  }

  body {
    min-height: 100%;
    position: relative;
    padding: 0;
    margin: 0;
    overflow: auto;
    display: flex;
    background: #121212;
  }

  main {
    display: flex;
    width: 100%;
    flex-direction: column;
    padding-top: 0;
    height: 100%;
    opacity: 1;
    z-index: $z-index-content;
    position: relative;
  }

  .content {
    padding: 0 2rem;
    padding-bottom: 3rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1160px;
  }

  h1 {
    font-size: 3rem;
    font-family: "Unbounded", Roboto, Arial;
    font-weight: 300;
    background: -webkit-linear-gradient(white, #38495a);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 800;
    margin: 0;
  }
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    color: $body-text-color;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }

  @media only screen and (max-width: 1000px) {
    .languages {
      flex-direction: column;
    }
    .content {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }
  @media only screen and (max-width: 400px) {
    .languages {
      flex-direction: column;
    }
    .content {
      padding: 0;
      gap: 0;
    }
  }
</style>
